#! /usr/bin/env python
import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Int32
import dronekit_sitl
# Import DroneKit-Python
from dronekit import connect, VehicleMode

def enum(**named_values):
     return type('Enum', (), named_values)

#dichiaro i possibili stati dell'autopilota
status_px4 = enum(CONNECTING=0,CONNECTED=1, ARMABLE=2, NOT_ARMABLE=3, ARMED=4, TAKEOFF=5, LANDED=6, DISCONNECTED=7, HOVER=8, LANDING=9, RTL=10)
#possibili richieste
cmd_request = enum(NO_REQ=0,ARM=1,DISARM=2,TAKEOFF=3,LAND=4,RTL=5)
#######################################################
#						     #
#  callback richieste    			     #
#						     #
#######################################################
def callback_cmd(cmd_req):
   print "ricevuto una richiesta"

   if cmd_req.data == cmd_request.NO_REQ:
   	print "No request.\n"

   elif cmd_req.data == cmd_request.ARM:
	arm_the_vehicle()

   elif cmd_req.data == cmd_request.DISARM:
	disarm_the_vehicle()

   elif cmd_req.data == cmd_request.TAKEOFF:
	arm_and_takeoff()

   elif cmd_req.data == cmd_request.LAND:
	land_the_vehicle()

   elif cmd_req.data == cmd_request.RTL:
	RTL_the_vehicle()
#######################################################
#						     #
#  arm the vehicle        			     #
#						     #
#######################################################
def arm_the_vehicle():
   
   #ruotine che controlla se il veicolo e armabile
   #e nel caso lo sia lo arma

   if  vehicle.is_armable:
    print "Arming motors"
    # Copter should arm in GUIDED mode
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True    

    # Confirm vehicle armed before attempting to take off
    while not vehicle.armed:      
    	print " Waiting for arming..."
        time.sleep(1)

    pub_status.publish(status_px4.ARMED)
    current_status = status_px4.ARMED

   else:
    #informo che il veicolo non  armabile
    pub_status.publish(status_px4.NOT_ARMABLE)
    current_status = status_px4.NOT_ARMABLE

#######################################################
#						     #
#  arm the vehicle        			     #
#						     #
#######################################################
def disarm_the_vehicle():
   

   # è possibile disarmalo solo se è landed
   if current_status == status_px4.LANDED:
   	vehicle.armed = False
    	# Confirm vehicle not armed 
    	while vehicle.armed:      
    		print " Waiting for disarming..."
        	time.sleep(1)

	#informo che il veicolo disarmato
	current_status == status_px4.DISARM
        pub_status.publish(current_status)
   else:
   	print " Non posso disarmare"
	
#######################################################
#						     #
#  takeoof the vehicle        			     #
#						     #
#######################################################
def arm_and_takeoff():
   target_altitude = 2
   #arma il veciolo
   arm_the_vehicle()

   if vehicle.armed:
    #informo che il veicolo decolla
    current_status = status_px4.TAKEOFF
    pub_status.publish(status_px4.TAKEOFF)

    print "Taking off!"
    vehicle.simple_takeoff(target_altitude) # Take off to target altitude

    # Wait until the vehicle reaches a safe height before processing the goto (otherwise the command 
    #  after Vehicle.simple_takeoff will execute immediately).
    while True:
      print " Altitude: ", vehicle.location.global_relative_frame.alt 
      #Break and return from function just below target altitude.        
      if vehicle.location.global_relative_frame.alt>=target_altitude*0.95: 
        print "Reached target altitude"
        break
      time.sleep(1)

    #informo che il veicolo decollato
    current_status = status_px4.HOVER
    pub_status.publish(status_px4.HOVER) 

   else:
    #informo che il veicolo non  armabile
    current_status = status_px4.NOT_ARMABLE
    pub_status.publish(status_px4.NOT_ARMABLE)

#######################################################
#						     #
#  land the vehicle        			     #
#						     #
#######################################################
def land_the_vehicle():  


   current_status = status_px4.LANDING
   pub_status.publish(current_status)
   print("Setting LAND mode...")
   vehicle.mode = VehicleMode("LAND")

   time(10)
   print("LANDED ...")
   current_status = status_px4.LANDED
   pub_status.publish(current_status)


#######################################################
#						     #
#  leggi lo stato del veciolo			     #
#						     #
#######################################################
def vehicle_read_status(vehicle):
    # Get all vehicle attributes (state)    
    vehicle.wait_ready('autopilot_version')
    print ' Get all vehicle attribute values:'
    print ' Autopilot Firmware version: %s' % vehicle.version
    print '   Major version number: %s' % vehicle.version.major
    print '   Minor version number: %s' % vehicle.version.minor
    print '   Patch version number: %s' % vehicle.version.patch
    print '   Release type: %s' % vehicle.version.release_type()
    print '   Release version: %s' % vehicle.version.release_version()
    print '   Stable release?: %s' % vehicle.version.is_stable()
    print ' Autopilot capabilities'
    print '   Supports MISSION_FLOAT message type: %s' % vehicle.capabilities.mission_float
    print '   Supports PARAM_FLOAT message type: %s' % vehicle.capabilities.param_float
    print '   Supports MISSION_INT message type: %s' % vehicle.capabilities.mission_int
    print '   Supports COMMAND_INT message type: %s' % vehicle.capabilities.command_int
    print '   Supports PARAM_UNION message type: %s' % vehicle.capabilities.param_union
    print '   Supports ftp for file transfers: %s' % vehicle.capabilities.ftp
    print '   Supports commanding attitude offboard: %s' % vehicle.capabilities.set_attitude_target
    print '   Supports commanding position and velocity targets in local NED frame: %s' % vehicle.capabilities.set_attitude_target_local_ned
    print '   Supports set position + velocity targets in global scaled integers: %s' % vehicle.capabilities.set_altitude_target_global_int
    print '   Supports terrain protocol / data handling: %s' % vehicle.capabilities.terrain
    print '   Supports direct actuator control: %s' % vehicle.capabilities.set_actuator_target
    print '   Supports the flight termination command: %s' % vehicle.capabilities.flight_termination
    print '   Supports mission_float message type: %s' % vehicle.capabilities.mission_float
    print '   Supports onboard compass calibration: %s' % vehicle.capabilities.compass_calibration
    print ' Global Location: %s' % vehicle.location.global_frame
    print ' Global Location (relative altitude): %s' % vehicle.location.global_relative_frame
    print ' Local Location: %s' % vehicle.location.local_frame
    print ' Attitude: %s' % vehicle.attitude
    print ' Velocity: %s' % vehicle.velocity
    print ' GPS: %s' % vehicle.gps_0
    print ' Battery: %s' % vehicle.battery
    print ' EKF OK?: %s' % vehicle.ekf_ok
    print ' Last Heartbeat: %s' % vehicle.last_heartbeat
    print ' Heading: %s' % vehicle.heading
    print ' Is Armable?: %s' % vehicle.is_armable
    print ' System status: %s' % vehicle.system_status.state
    print ' Groundspeed: %s' % vehicle.groundspeed    # settable
    print ' Airspeed: %s' % vehicle.airspeed    # settable
    print ' Mode: %s' % vehicle.mode.name    # settable
    print ' Armed: %s' % vehicle.armed    # settable


#######################################################
#						     #
#  MAIN						     #
#						     #
#######################################################
if __name__ == '__main__':

    
    #inizializzo il nodo
    rospy.init_node('Pixhawk_Manager', anonymous=True)
    
    #dichiaro un publisher
    pub_status = rospy.Publisher('/napodrone/status', Int32, queue_size=10)
    #dichiaro un subscriber
    rospy.Subscriber("/napodrone/cmd_request", Int32, callback_cmd)

    #leggo i parametri dal launch file
    device = rospy.get_param('/PixhawkManager/dev', '/dev/ttyUSB0')
    real_vehicle = rospy.get_param('/PixhawkManager/real_vehicle', False)
    loop_rate = rospy.get_param('/PixhawkManager/loop_rate_hz', 10)

    rate = rospy.Rate(loop_rate)
    time.sleep(5)

    #informo che sto conettendo
    pub_status.publish(status_px4.CONNECTING)
    current_status = status_px4.CONNECTING
    #effettuo la connessione
    if real_vehicle == True:
    	vehicle = connect(device, wait_ready=True, baud=57600)
    else:
        sitl = dronekit_sitl.start_default()
    	connection_string = sitl.connection_string()
        vehicle = connect(connection_string, wait_ready=True)

    #informo che sono connesso al veicolo
    pub_status.publish(status_px4.CONNECTED)
    current_status = status_px4.CONNECTED

    #leggo lo stato del veicolo
    #vehicle_read_status(vehicle)

    print "Basic pre-arm checks"
    # Don't try to arm until autopilot is ready
    while not vehicle.is_armable:
    	print " Waiting for vehicle to initialise..."
	pub_status.publish(status_px4.NOT_ARMABLE)
	current_status = status_px4.NOT_ARMABLE
        time.sleep(1)
        
    pub_status.publish(status_px4.ARMABLE)
    current_status = status_px4.ARMABLE

    while not rospy.is_shutdown():
	rate.sleep()



    # Close vehicle object before exiting script
    vehicle.close()
    if real_vehicle == False:
    	# Shut down simulator
    	sitl.stop()

    #informo che sono disconnesso al veicolo
    pub_status.publish(status_px4.DISCONNECTED)
    current_status = status_px4.DISCONNECTED
    print("Pixhawk Manager is down")



